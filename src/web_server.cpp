#include "web_server.h"
#include "sensors.h"
#include "terminal_commands.h"
#include "terminal_manager.h"
#include "config_storage.h"
#include "system_controller.h"
#include <Arduino.h>
#include <HardwareSerial.h>
#include <SPIFFS.h>
#include "esp_wifi.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

void WebServerManager::begin() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPIFFS
  if (!SPIFFS.begin(true)) {
    if (DEBUG_SERIAL) {
      Serial.println("SPIFFS Mount Failed");
    }
    return;
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è WiFi —Å–µ—Å—Å–∏–∏
  wifiSessionActive = false;
  sessionStartTime = 0;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è WebServer
  setupRoutes();
  
  if (DEBUG_SERIAL) {
    Serial.println("Web server initialized (WiFi session mode)");
    Serial.println("Press BOOT button 3 times to start WiFi session");
  }
}

void WebServerManager::handleClient() {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WiFi —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
  if (wifiSessionActive) {
    server.handleClient();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è WiFi —Å–µ—Å—Å–∏–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    static unsigned long lastDiagnosticTime = 0;
    if (millis() - lastDiagnosticTime > 30000) {
      if (systemController && DEBUG_SERIAL) {
        Serial.println("--- –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–¢–ß–ò–ö–ê –ü–û–¢–û–ö–ê (WiFi –∞–∫—Ç–∏–≤–µ–Ω) ---");
        Serial.print("–ü–∏–Ω –¥–∞—Ç—á–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ (GPIO35): ");
        Serial.println(digitalRead(FLOW_SENSOR_PIN) ? "HIGH" : "LOW");
        Serial.print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞: ");
        Serial.println(systemController->getSensors().isFlowSensorWorking() ? "–†–ê–ë–û–¢–ê–ï–¢" : "–ù–ï –†–ê–ë–û–¢–ê–ï–¢");
        Serial.print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤: ");
        Serial.println(systemController->getSensors().getFlowPulseCount());
        Serial.print("–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø—É–ª—å—Å–∞: ");
        Serial.print(systemController->getSensors().getTimeSinceLastPulse());
        Serial.println(" –º—Å –Ω–∞–∑–∞–¥");
        Serial.print("–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞: ");
        Serial.print(systemController->getCurrentFlowRate(), 2);
        Serial.println(" –ª/–º–∏–Ω");
        Serial.print("–ü–æ—Ç–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ");
        Serial.println(systemController->isWaterFlowing() ? "–î–ê" : "–ù–ï–¢");
        Serial.println("--------------------------------------------------------");
      }
      lastDiagnosticTime = millis();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏
    if ((millis() - sessionStartTime) > WIFI_SESSION_TIMEOUT_MS) {
      if (DEBUG_SERIAL) {
        Serial.println("WiFi —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–∫–ª—é—á–∞–µ–º WiFi");
      }
      stopWiFiSession();
    }
  }
}

void WebServerManager::startWiFiSession() {
  if (wifiSessionActive) {
    if (DEBUG_SERIAL) {
      Serial.println("WiFi —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞");
    }
    return;
  }
  
  // –ó–∞–ø—É—Å–∫ WiFi –≤ —Ä–µ–∂–∏–º–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  startWiFiAP();
  
  // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
  server.begin();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  wifiSessionActive = true;
  sessionStartTime = millis();
  
  if (currentState) {
    currentState->isWiFiEnabled = true;
    currentState->wifiSessionStartTime = sessionStartTime;
    currentState->systemMode = SYSTEM_MODE_WIFI_SESSION;
  }
  
  if (DEBUG_SERIAL) {
    Serial.println("=== WiFi –°–ï–°–°–ò–Ø –ó–ê–ü–£–©–ï–ù–ê ===");
    Serial.print("IP address: ");
    Serial.println(WiFi.softAPIP());
    Serial.print("SSID: ");
    Serial.println(WIFI_SSID);
    Serial.print("–ü–∞—Ä–æ–ª—å: ");
    Serial.println(WIFI_PASSWORD);
    Serial.println("–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ 15 –º–∏–Ω—É—Ç");
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WiFi
    if (systemController) {
      Serial.println("--- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–¢–ß–ò–ö–ê –ü–û–¢–û–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï WiFi ---");
      Serial.print("–ü–∏–Ω –¥–∞—Ç—á–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ (GPIO35): ");
      Serial.println(digitalRead(FLOW_SENSOR_PIN) ? "HIGH" : "LOW");
      Serial.print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞: ");
      Serial.println(systemController->getSensors().isFlowSensorWorking() ? "–†–ê–ë–û–¢–ê–ï–¢" : "–ù–ï –†–ê–ë–û–¢–ê–ï–¢");
      Serial.print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤: ");
      Serial.println(systemController->getSensors().getFlowPulseCount());
      Serial.print("–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø—É–ª—å—Å–∞: ");
      Serial.print(systemController->getSensors().getTimeSinceLastPulse());
      Serial.println(" –º—Å –Ω–∞–∑–∞–¥");
      Serial.print("–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞: ");
      Serial.print(systemController->getCurrentFlowRate(), 2);
      Serial.println(" –ª/–º–∏–Ω");
      Serial.print("–ü–æ—Ç–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ");
      Serial.println(systemController->isWaterFlowing() ? "–î–ê" : "–ù–ï–¢");
      Serial.println("-----------------------------------------------");
    }
    
    Serial.println("========================");
  }
}

void WebServerManager::stopWiFiSession() {
  if (!wifiSessionActive) {
    return;
  }
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
  server.stop();
  
  // –û—Ç–∫–ª—é—á–∞–µ–º WiFi
  WiFi.softAPdisconnect(true);
  WiFi.mode(WIFI_OFF);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  wifiSessionActive = false;
  sessionStartTime = 0;
  
  if (currentState) {
    currentState->isWiFiEnabled = false;
    currentState->wifiSessionStartTime = 0;
    currentState->systemMode = SYSTEM_MODE_ACTIVE;
  }
  
  if (DEBUG_SERIAL) {
    Serial.println("=== WiFi –°–ï–°–°–ò–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê ===");
    Serial.println("WiFi –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏");
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ WiFi
    if (systemController) {
      Serial.println("--- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–¢–ß–ò–ö–ê –ü–û–¢–û–ö–ê –ü–†–ò –û–°–¢–ê–ù–û–í–ö–ï WiFi ---");
      Serial.print("–ü–∏–Ω –¥–∞—Ç—á–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ (GPIO35): ");
      Serial.println(digitalRead(FLOW_SENSOR_PIN) ? "HIGH" : "LOW");
      Serial.print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞: ");
      Serial.println(systemController->getSensors().isFlowSensorWorking() ? "–†–ê–ë–û–¢–ê–ï–¢" : "–ù–ï –†–ê–ë–û–¢–ê–ï–¢");
      Serial.print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤: ");
      Serial.println(systemController->getSensors().getFlowPulseCount());
      Serial.print("–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø—É–ª—å—Å–∞: ");
      Serial.print(systemController->getSensors().getTimeSinceLastPulse());
      Serial.println(" –º—Å –Ω–∞–∑–∞–¥");
      Serial.print("–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞: ");
      Serial.print(systemController->getCurrentFlowRate(), 2);
      Serial.println(" –ª/–º–∏–Ω");
      Serial.print("–ü–æ—Ç–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ");
      Serial.println(systemController->isWaterFlowing() ? "–î–ê" : "–ù–ï–¢");
      Serial.println("------------------------------------------------");
    }
    
    Serial.println("===============================");
  }
}

bool WebServerManager::isWiFiSessionActive() const {
  return wifiSessionActive;
}

unsigned long WebServerManager::getSessionTimeLeft() const {
  if (!wifiSessionActive) {
    return 0;
  }
  
  unsigned long elapsed = millis() - sessionStartTime;
  if (elapsed >= WIFI_SESSION_TIMEOUT_MS) {
    return 0;
  }
  
  return WIFI_SESSION_TIMEOUT_MS - elapsed;
}

void WebServerManager::updateStatus(SystemState& state) {
  currentState = &state;
}

void WebServerManager::setSystemController(SystemController* controller) {
  systemController = controller;
}

void WebServerManager::setupRoutes() {
  server.on("/", HTTP_GET, [this]() { 
    server.send(200, "text/html", getMainPage()); 
  });
  
  server.on("/web_interface.html", HTTP_GET, [this]() { 
    server.send(200, "text/html", getWebInterface()); 
  });
  
  server.on("/status", HTTP_GET, [this]() { 
    server.send(200, "application/json", getStatusJSON()); 
  });
  
  server.on("/config", HTTP_GET, [this]() { 
    server.send(200, "application/json", getConfigJSON()); 
  });
  
  server.on("/sensors", HTTP_GET, [this]() { 
    server.send(200, "application/json", getSensorsInfoJSON()); 
  });
  
  server.on("/config", HTTP_POST, [this]() { 
    handleSaveConfig(); 
  });
  
  server.on("/calibrate", HTTP_POST, [this]() { 
    handleCalibrate(); 
  });
  
  server.on("/emergency", HTTP_POST, [this]() { 
    handleEmergencyStop(); 
  });
  
  // API –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  server.on("/reset-config", HTTP_POST, [this]() {
    if (currentState) {
      TerminalManager::addLog("üîÑ –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
      currentState->resetConfiguration();
      server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞\"}");
      TerminalManager::addLog("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
    } else {
      server.send(500, "application/json", "{\"status\":\"error\",\"message\":\"–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\"}");
      TerminalManager::addLog("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }
  });
  
  // API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  server.on("/save-config", HTTP_POST, [this]() {
    if (currentState) {
      TerminalManager::addLog("üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
      if (currentState->saveConfiguration()) {
        server.send(200, "application/json", "{\"status\":\"success\",\"message\":\"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\"}");
        TerminalManager::addLog("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
      } else {
        server.send(500, "application/json", "{\"status\":\"error\",\"message\":\"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\"}");
        TerminalManager::addLog("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
      }
    } else {
      server.send(500, "application/json", "{\"status\":\"error\",\"message\":\"–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\"}");
      TerminalManager::addLog("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }
  });
  
  // API –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  server.on("/terminal", HTTP_POST, [this]() {
    if (currentState) {
      String command = server.arg("command");
      String result = TerminalManager::processCommand(command, currentState);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
      if (result.length() > 0) {
        TerminalManager::addLog(result);
      }
      
      server.send(200, "text/plain", result);
    } else {
      server.send(500, "text/plain", "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }
  });
  
  // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  server.on("/terminal-logs", HTTP_GET, [this]() {
    String logs = TerminalManager::getLogs();
    server.send(200, "text/plain", logs);
  });
  
  // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Serial Monitor)
  server.on("/system-logs", HTTP_GET, [this]() {
    String logs = getSystemLogs();
    server.send(200, "text/plain", logs);
  });
  
  server.onNotFound([this]() { 
    server.send(404, "application/json", "{\"error\":\"Not found\"}"); 
  });
}

void WebServerManager::handleSaveConfig() {
  if (server.hasArg("plain")) {
    String body = server.arg("plain");
    DynamicJsonDocument doc(CONFIG_JSON_SIZE);
    DeserializationError error = deserializeJson(doc, body);
    
    if (!error) {
      bool configChanged = false;
      
      if (doc.containsKey("targetTemp")) {
        float newTemp = doc["targetTemp"];
        if (newTemp >= TARGET_TEMP_MIN && newTemp <= TARGET_TEMP_MAX) {
          currentState->targetTemp = newTemp;
          // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ SystemController
          if (systemController) {
            systemController->setTargetTemperature(newTemp);
            if (DEBUG_SERIAL) {
              Serial.println("SystemController target temperature updated to: " + String(newTemp) + "¬∞C");
            }
          }
          configChanged = true;
          if (DEBUG_SERIAL) {
            Serial.println("Target temperature updated to: " + String(newTemp) + "¬∞C");
          }
          TerminalManager::addLog("–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " + String(newTemp, 1) + "¬∞C");
        }
      }
      
      if (doc.containsKey("flowCalibrationFactor")) {
        float newFactor = doc["flowCalibrationFactor"];
        if (newFactor >= FLOW_CALIBRATION_MIN && newFactor <= FLOW_CALIBRATION_MAX) {
          currentState->flowCalibrationFactor = newFactor;
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –¥–∞—Ç—á–∏–∫–µ
          systemController->getSensors().setCalibrationFactor(newFactor);
          configChanged = true;
          if (DEBUG_SERIAL) {
            Serial.println("Flow calibration factor updated to: " + String(newFactor) + " imp/L");
          }
          TerminalManager::addLog("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " + String(newFactor, 2) + " –∏–º–ø/–ª");
        }
      }
      
      if (configChanged) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ EEPROM
        if (currentState->saveConfiguration()) {
          server.send(200, "application/json", "{\"status\":\"ok\"}");
          if (DEBUG_SERIAL) {
            Serial.println("Configuration updated and saved to EEPROM");
          }
          TerminalManager::addLog("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ EEPROM —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
        } else {
          server.send(500, "application/json", "{\"error\":\"Failed to save to EEPROM\"}");
          if (DEBUG_SERIAL) {
            Serial.println("Failed to save configuration to EEPROM");
          }
          TerminalManager::addLog("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ EEPROM —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
        }
      } else {
        server.send(400, "application/json", "{\"error\":\"Invalid parameters\"}");
        TerminalManager::addLog("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
      }
    } else {
      server.send(400, "application/json", "{\"error\":\"Invalid JSON\"}");
      TerminalManager::addLog("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
    }
  } else {
    server.send(400, "application/json", "{\"error\":\"No data\"}");
    TerminalManager::addLog("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
  }
}

void WebServerManager::handleCalibrate() {
  if (currentState) {
    // –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞
    TerminalManager::addLog("üîß –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
    systemController->getSensors().calibrateFlowSensor();
    currentState->flowCalibrationFactor = systemController->getSensors().getCalibrationFactor();
    
    server.send(200, "application/json", "{\"status\":\"calibration_completed\", \"factor\":" + String(currentState->flowCalibrationFactor) + "}");
    
    if (DEBUG_SERIAL) {
      Serial.println("Flow sensor calibration completed");
    }
    TerminalManager::addLog("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: " + String(currentState->flowCalibrationFactor, 2) + " –∏–º–ø/–ª");
  }
}

void WebServerManager::handleEmergencyStop() {
  if (currentState) {
    currentState->isSystemEnabled = false;
    currentState->isHeating = false;
    
    server.send(200, "application/json", "{\"status\":\"emergency_stop\"}");
    
    if (DEBUG_SERIAL) {
      Serial.println("EMERGENCY STOP via web interface");
    }
    TerminalManager::addLog("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
  }
}

String WebServerManager::getMainPage() {
  return readFileFromSPIFFS("/index.html");
}

String WebServerManager::getWebInterface() {
  return readFileFromSPIFFS("/web_interface.html");
}

String WebServerManager::getStatusJSON() {
  if (!currentState) {
    return "{\"error\":\"No state data\"}";
  }
  
  DynamicJsonDocument doc(1024);
  doc["temperature"] = currentState->currentTemp;
  doc["targetTemp"] = currentState->targetTemp;
  doc["flowRate"] = currentState->flowRate;
  doc["flowCalibrationFactor"] = currentState->flowCalibrationFactor;
  doc["flowPulseCount"] = systemController->getSensors().getFlowPulseCount();
  doc["isHeating"] = currentState->isHeating;
  doc["isFlowDetected"] = currentState->isFlowDetected;
  doc["isThermalFuseOK"] = currentState->isThermalFuseOK;
  doc["isSystemEnabled"] = currentState->isSystemEnabled;
  doc["isPowerRamping"] = currentState->isPowerRamping;
  doc["powerL1"] = currentState->heatingPower[0];
  doc["powerL2"] = currentState->heatingPower[1];
  doc["powerL3"] = currentState->heatingPower[2];
  doc["targetPowerL1"] = currentState->targetPower[0];
  doc["targetPowerL2"] = currentState->targetPower[1];
  doc["targetPowerL3"] = currentState->targetPower[2];
  doc["uptime"] = millis() / 1000;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
  String modeText = "";
  switch(currentState->systemMode) {
    case SYSTEM_MODE_SLEEP:
      modeText = "–ì–ª—É–±–æ–∫–∏–π —Å–æ–Ω";
      break;
    case SYSTEM_MODE_ACTIVE:
      modeText = "–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞";
      break;
    case SYSTEM_MODE_WIFI_SESSION:
      modeText = "WiFi —Å–µ—Å—Å–∏—è";
      break;
    default:
      modeText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      break;
  }
  
  doc["systemMode"] = currentState->systemMode;
  doc["systemModeText"] = modeText;
  doc["isWiFiEnabled"] = currentState->isWiFiEnabled;
  doc["wifiSessionTimeLeft"] = currentState->isWiFiEnabled ? 
    (WIFI_SESSION_TIMEOUT_MS - (millis() - currentState->wifiSessionStartTime)) / 1000 : 0;
  doc["updateFrequency"] = 1000; // 1—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ WiFi —Å–µ—Å—Å–∏–∏
  
  String response;
  serializeJson(doc, response);
  return response;
}

String WebServerManager::getConfigJSON() {
  DynamicJsonDocument doc(512);
  
  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ EEPROM –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
  float targetTemp = TARGET_TEMP_DEFAULT;
  float flowCalibrationFactor = FLOW_CALIBRATION_FACTOR;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ EEPROM
  if (ConfigStorage::isValidConfig()) {
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ EEPROM
    uint32_t magic;
    EEPROM.get(0, magic); // MAGIC_NUMBER_ADDR = 0
    
    if (magic == 0x57415445) { // MAGIC_NUMBER
      // –ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      struct {
        float targetTemp;
        float flowCalibrationFactor;
        uint32_t magic;
      } config;
      
      EEPROM.get(4, config); // CONFIG_START_ADDR = 4
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (config.targetTemp >= TARGET_TEMP_MIN && config.targetTemp <= TARGET_TEMP_MAX &&
          config.flowCalibrationFactor >= FLOW_CALIBRATION_MIN && config.flowCalibrationFactor <= FLOW_CALIBRATION_MAX) {
        targetTemp = config.targetTemp;
        flowCalibrationFactor = config.flowCalibrationFactor;
        
        if (DEBUG_SERIAL) {
          Serial.println("WebServer: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ EEPROM:");
          Serial.println("–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(targetTemp, 1) + "¬∞C");
          Serial.println("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: " + String(flowCalibrationFactor, 2) + " –∏–º–ø/–ª");
        }
      }
    }
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON
  doc["targetTemp"] = targetTemp;
  doc["flowCalibrationFactor"] = flowCalibrationFactor;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  doc["flowThresholdMin"] = FLOW_THRESHOLD_MIN;
  doc["flowThresholdMax"] = FLOW_THRESHOLD_MAX;
  doc["flowCalibrationMin"] = FLOW_CALIBRATION_MIN;
  doc["flowCalibrationMax"] = FLOW_CALIBRATION_MAX;
  doc["tempHysteresis"] = TEMP_HYSTERESIS;
  doc["maxTempSafety"] = MAX_TEMP_SAFETY;
  doc["targetTempMin"] = TARGET_TEMP_MIN;
  doc["targetTempMax"] = TARGET_TEMP_MAX;
  
  String response;
  serializeJson(doc, response);
  return response;
}

void WebServerManager::startWiFiAP() {
  // –û—Ç–∫–ª—é—á–∞–µ–º WiFi –∫–ª–∏–µ–Ω—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
  WiFi.mode(WIFI_AP);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä—ã—Ç–æ–π —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ 5–º
  WiFi.softAPConfig(IPAddress(192, 168, 4, 1), IPAddress(192, 168, 4, 1), IPAddress(255, 255, 255, 0));
  WiFi.softAP(WIFI_SSID, WIFI_PASSWORD, WIFI_CHANNEL, 1, WIFI_MAX_CONNECTIONS); // –°–∫—Ä—ã—Ç–∞—è —Å–µ—Ç—å, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
  
  // –ü–æ–ª–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å WiFi –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  WiFi.setTxPower(WIFI_POWER_19_5dBm); // 19.5dBm - –ø–æ–ª–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è WiFi - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ ESP-IDF
  esp_wifi_set_max_tx_power(WIFI_TX_POWER_FULL); // –ü–æ–ª–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  
  // –û—Ç–∫–ª—é—á–∞–µ–º —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ WiFi –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  WiFi.setSleep(WIFI_PS_NONE); // –û—Ç–∫–ª—é—á–∞–µ–º —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ WiFi
  
  if (DEBUG_SERIAL) {
    Serial.print("WiFi AP started (full power for web interface): ");
    Serial.println(WIFI_SSID);
    Serial.printf("WiFi –º–æ—â–Ω–æ—Å—Ç—å: %d dBm (~%.1f mW)\n", WiFi.getTxPower(), pow(10, WiFi.getTxPower()/10.0));
    Serial.printf("WiFi –∫–∞–Ω–∞–ª: %d\n", WIFI_CHANNEL);
    Serial.println("WiFi —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç");
    Serial.println("IP –∞–¥—Ä–µ—Å: 192.168.4.1");
  }
}

String WebServerManager::readFileFromSPIFFS(String path) {
  File file = SPIFFS.open(path, "r");
  if (!file) {
    return "Error: File not found";
  }
  
  String content = "";
  while (file.available()) {
    content += char(file.read());
  }
  file.close();
  
  return content;
}

String WebServerManager::getSystemLogs() {
  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  String logs = "";
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  logs += "=== –°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò ===\n";
  logs += "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(millis() / 1000) + " —Å–µ–∫\n";
  logs += "–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: " + String(ESP.getFreeHeap()) + " –±–∞–π—Ç\n";
  logs += "–†–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞: " + String(uxTaskGetStackHighWaterMark(NULL)) + " –±–∞–π—Ç\n";
  logs += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á–∏–ø–∞: " + String(temperatureRead(), 1) + "¬∞C\n";
  
  if (currentState) {
    logs += "\n=== –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´ ===\n";
    logs += "–†–µ–∂–∏–º: " + String(currentState->systemMode == 0 ? "–°–æ–Ω" : 
                               currentState->systemMode == 1 ? "–ê–∫—Ç–∏–≤–Ω—ã–π" : "WiFi —Å–µ—Å—Å–∏—è") + "\n";
    logs += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(currentState->currentTemp, 1) + "¬∞C\n";
    logs += "–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(currentState->targetTemp, 1) + "¬∞C\n";
    logs += "–ü—Ä–æ—Ç–æ–∫: " + String(currentState->flowRate, 2) + " –ª/–º–∏–Ω\n";
    logs += "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Ç–æ–∫: " + String(currentState->isFlowDetected ? "–î–ê" : "–ù–ï–¢") + "\n";
    logs += "–ù–∞–≥—Ä–µ–≤: " + String(currentState->isHeating ? "–í–ö–õ" : "–í–´–ö–õ") + "\n";
    logs += "WiFi: " + String(currentState->isWiFiEnabled ? "–í–ö–õ" : "–í–´–ö–õ") + "\n";
  }
  
  logs += "\n=== –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø ===\n";
  logs += "–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n";
  logs += "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n";
  logs += "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n";
  
  return logs;
}

String WebServerManager::getSensorsInfoJSON() {
  DynamicJsonDocument doc(1024);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è D-–Ω–∞–∑–≤–∞–Ω–∏—è –ø–∏–Ω–∞
  auto getDPinName = [](int gpio) -> String {
    switch (gpio) {
      case 34: return "D34";
      case 35: return "D35";
      case 32: return "D32";
      case 33: return "D33";
      case 25: return "D25";
      case 26: return "D26";
      case 27: return "D27";
      case 14: return "D14";
      case 12: return "D12";
      case 13: return "D13";
      case 23: return "D23";
      case 22: return "D22";
      case 21: return "D21";
      case 19: return "D19";
      case 18: return "D18";
      case 5:  return "D5";
      case 4:  return "D4";
      case 2:  return "D2";
      case 15: return "D15";
      case 1: return "TX0";
      case 3: return "RX0";
      case 17: return "TX2";
      case 16: return "RX2";
      default: return "N/A";
    }
  };
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–∞—Ö —Å D-–Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
  doc["pins"]["ntc"] = "GPIO" + String(NTC_PIN) + " (" + getDPinName(NTC_PIN) + ")";
  doc["pins"]["flowSensor"] = "GPIO" + String(FLOW_SENSOR_PIN) + " (" + getDPinName(FLOW_SENSOR_PIN) + ")";
  doc["pins"]["triacL1"] = "GPIO" + String(TRIAC_L1_PIN) + " (" + getDPinName(TRIAC_L1_PIN) + ")";
  doc["pins"]["triacL2"] = "GPIO" + String(TRIAC_L2_PIN) + " (" + getDPinName(TRIAC_L2_PIN) + ")";
  doc["pins"]["triacL3"] = "GPIO" + String(TRIAC_L3_PIN) + " (" + getDPinName(TRIAC_L3_PIN) + ")";
  doc["pins"]["relayPower"] = "GPIO" + String(MOSFET_EN_PIN) + " (" + getDPinName(MOSFET_EN_PIN) + ")";
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
  // NTC –¥–∞—Ç—á–∏–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–≤–Ω–æ 0 (—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
  int ntcValue = analogRead(NTC_PIN);
  doc["sensors"]["ntcConnected"] = ntcValue > 100; // –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  
  // –î–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –≤—Ö–æ–¥ –∏ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å—Å—è
  pinMode(FLOW_SENSOR_PIN, INPUT_PULLUP);
  int flowValue = digitalRead(FLOW_SENSOR_PIN);
  doc["sensors"]["flowSensorConnected"] = true; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
  
  doc["sensors"]["thermalFuseOK"] = "–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞";
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  doc["debug"]["ntcRawValue"] = ntcValue;
  doc["debug"]["flowRawValue"] = flowValue;
  
  // –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (currentState) {
    doc["values"]["temperature"] = currentState->currentTemp;
    doc["values"]["flowRate"] = currentState->flowRate;
    doc["values"]["flowPulseCount"] = systemController->getSensors().getFlowPulseCount();
  }
  
  // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  doc["system"]["uptime"] = millis() / 1000;
  doc["system"]["chipTemp"] = temperatureRead(); // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á–∏–ø–∞ ESP32 –≤ –¶–µ–ª—å—Å–∏—è—Ö
  
  String response;
  serializeJson(doc, response);
  return response;
}
